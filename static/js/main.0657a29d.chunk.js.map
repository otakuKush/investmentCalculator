{"version":3,"sources":["component/InvestmentForm.js","component/CalculateInvestment.js","App.js","serviceWorker.js","index.js"],"names":["InvestmentForm","onChange","e","setState","amount","target","value","onFromDateUpdate","fromDate","onToDateUpdate","toDate","swap","input","index_A","index_B","temp","submitForm","preventDefault","state","amountErr","fromDateFormate","toDateString","split","splice","toDateFormate","CalInvestSync","dates","initailNAV","finalNAV","data","map","Date","frmdt","NAV","todt","undefined","toFixed","CalculateInvestment","join","investmentAmount","fundList","onSubmit","this","className","type","name","minDate","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+5xIA0FeA,EArFf,kDACI,aAAc,IAAD,8BACT,gBAUJC,SAAW,SAAAC,GACP,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAZxB,EAcbC,iBAAmB,SAACC,GAChB,EAAKL,SAAS,CAACK,cAfN,EAiBbC,eAAiB,SAACC,GACd,EAAKP,SAAS,CAACO,YAlBN,EAoBbC,KAAO,SAACC,EAAOC,EAASC,GACpB,IAAIC,EAAOH,EAAMC,GAGjB,OAFAD,EAAMC,GAAWD,EAAME,GACvBF,EAAME,GAAWC,EACVH,GAxBE,EA2BbI,WAAa,SAACd,GAEV,GADAA,EAAEe,iBACuB,IAAtB,EAAKC,MAAMd,OACV,EAAKD,SAAS,CAACgB,UAAW,qDACzB,CACD,IAAIC,EAAkB,EAAKT,KAAK,EAAKO,MAAMV,SAASa,eAAeC,MAAM,KAAKC,OAAO,GAAI,EAAE,GACvFC,EAAgB,EAAKb,KAAK,EAAKO,MAAMR,OAAOW,eAAeC,MAAM,KAAKC,OAAO,GAAI,EAAE,GAKjFE,EC1CiB,SAACC,EAAMtB,GACtC,IAAIuB,EAAYC,EASZ,OARAC,EAAKC,KAAI,SAACD,GACHA,EAAKE,MAAQL,EAAMM,MAClBL,EAAaE,EAAKI,IAEdJ,EAAKE,MAAQL,EAAMQ,OACvBN,EAAWC,EAAKI,aAGNE,IAAfR,QAAyCQ,IAAbP,GAClBxB,EAAOuB,EAAYC,GAAUQ,QAAQ,QAE5BD,GAAdR,EAAgC,8CAC5B,4CD4BcU,CAJT,CACTL,MAAOZ,EAAgBkB,KAAK,KAC5BJ,KAAMV,EAAcc,KAAK,MAEqB,EAAKpB,MAAMd,QACzD,EAAKD,SAAS,CACVoC,iBAAkBd,MAtC9B,EAAKP,MAAM,CACPd,OAAO,EACPI,SAAU,IAAIuB,KACdrB,OAAQ,IAAIqB,KACZZ,UAAW,GACXqB,SAAS,GACTD,iBAAiB,KARZ,EADjB,qDAwDQ,OACI,oCACA,sDACA,0BAAME,SAAUC,KAAK1B,YACjB,yBAAK2B,UAAU,cACX,4DACA,2BAAOA,UAAU,eAAeC,KAAK,SAASC,KAAK,SAASvC,MAAOoC,KAAKxB,MAAMd,OAAQH,SAAUyC,KAAKzC,WACrG,0BAAM0C,UAAU,YAAYD,KAAKxB,MAAMC,YAE3C,yBAAKwB,UAAU,cACX,qDACA,kBAAC,IAAD,CAAYA,UAAU,YAAY1C,SAAUyC,KAAKnC,iBAAkBsC,KAAK,WAAWvC,MAAOoC,KAAKxB,MAAMV,SAAUsC,QAAS,IAAIf,KAAK,gBAErI,yBAAKY,UAAU,cACX,oDACA,kBAAC,IAAD,CAAYA,UAAU,YAAY1C,SAAUyC,KAAKjC,eAAgBH,MAAOoC,KAAKxB,MAAMR,UAEvF,2BAAOkC,KAAK,SAAStC,MAAM,YAAYqC,UAAU,oBAEjD,yBAAKA,UAAU,gBACX,8DACA,6BAAMD,KAAKxB,MAAMqB,yBA7ErC,GAAoCQ,a,MEQrBC,MARf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,QCIcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0657a29d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport DatePicker from 'react-date-picker'\r\nimport {GetFundList} from '../api/Api'\r\nimport {CalculateInvestment} from './CalculateInvestment'\r\n\r\nexport class InvestmentForm extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            amount:0,\r\n            fromDate: new Date(),\r\n            toDate: new Date(),\r\n            amountErr: \"\",\r\n            fundList:\"\",\r\n            investmentAmount:\"-\",\r\n        }\r\n    }\r\n    onChange = e => {\r\n        this.setState({ amount: e.target.value })\r\n    }\r\n    onFromDateUpdate = (fromDate) => {\r\n        this.setState({fromDate})\r\n    }\r\n    onToDateUpdate = (toDate) => {\r\n        this.setState({toDate})\r\n    }\r\n    swap = (input, index_A, index_B) => {\r\n        let temp = input[index_A];\r\n        input[index_A] = input[index_B];\r\n        input[index_B] = temp;\r\n        return input;\r\n    }\r\n    \r\n    submitForm = (e) => {\r\n        e.preventDefault();\r\n        if(this.state.amount === 0)\r\n            this.setState({amountErr: \"Please enter amount you would like to Invest\"})\r\n        else {\r\n            let fromDateFormate = this.swap(this.state.fromDate.toDateString().split(\" \").splice(1), 0,1);\r\n            let toDateFormate = this.swap(this.state.toDate.toDateString().split(\" \").splice(1), 0,1);\r\n            let params = {\r\n                frmdt: fromDateFormate.join(\"-\"),\r\n                todt: toDateFormate.join(\"-\"),\r\n            }\r\n            const CalInvestSync = CalculateInvestment(params, this.state.amount);\r\n                this.setState({\r\n                    investmentAmount: CalInvestSync,\r\n                })\r\n            \r\n            //Reference method for calling up the API with parameter start\r\n                /*const GetFundListSync = GetFundList(params);\r\n                GetFundListSync.then((result) => this.setState({\r\n                    fundList: result,\r\n                    amountErr: \"\"\r\n                }))*/\r\n            //API call end\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h1>Invenstment Calculator</h1>\r\n            <form onSubmit={this.submitForm}>\r\n                <div className=\"form-group\">\r\n                    <label>Investment Amount (in Rs)</label>\r\n                    <input className=\"form-control\" type=\"number\" name=\"amount\" value={this.state.amount} onChange={this.onChange}/>\r\n                    <span className=\"errorMsg\">{this.state.amountErr}</span>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Select start date:</label>\r\n                    <DatePicker className=\"form-date\" onChange={this.onFromDateUpdate} name=\"fromDate\" value={this.state.fromDate} minDate={new Date('4-01-2015')} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Select end date :</label>\r\n                    <DatePicker className=\"form-date\" onChange={this.onToDateUpdate} value={this.state.toDate}/>\r\n                </div>\r\n                <input type=\"submit\" value=\"Calculate\" className=\"btn btn-primary\"/>\r\n\r\n                <div className=\"final-result\">\r\n                    <label>Invenstment Returns (in Rs)</label>\r\n                    <div>{this.state.investmentAmount}</div>\r\n                </div>\r\n            </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InvestmentForm\r\n","import data from './initial.json'\r\n\r\nexport const CalculateInvestment = (dates,amount) => {\r\n    var initailNAV, finalNAV;\r\n        data.map((data) => {\r\n            if(data.Date == dates.frmdt){\r\n                initailNAV = data.NAV;\r\n            }\r\n            else if(data.Date == dates.todt){\r\n                finalNAV = data.NAV;\r\n            }\r\n        })\r\n        if(initailNAV !== undefined && finalNAV !== undefined){\r\n            return ((amount/initailNAV)*finalNAV).toFixed(2);\r\n        }\r\n        else if(initailNAV == undefined) return \"Selected start date does not have NAV value\"\r\n        else return \"Selected end date does not have NAV value\"\r\n\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport InvestmentForm from './component/InvestmentForm'\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InvestmentForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}